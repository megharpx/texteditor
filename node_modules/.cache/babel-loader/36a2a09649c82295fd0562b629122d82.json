{"ast":null,"code":"import { openDB } from 'idb';\nconst initdb = async () => openDB('jate', 1, {\n  upgrade(db) {\n    if (db.objectStoreNames.contains('jate')) {\n      console.log('jate database already exists');\n      return;\n    }\n    db.createObjectStore('jate', {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n    console.log('jate database created');\n  }\n});\n\n// GET function\nexport const getDb = async value => {\n  console.log('Getting data from the jateDB');\n  // connect to DB and version we want to use\n  const jateDb = await openDB('jate', 1);\n  // transactionto specify the DB we are posting to and the data privileges. \n  const tx = jateDb.transaction('jate', 'readwrite');\n  // open the object store\n  const objStore = tx.objectStore('jate');\n  // use the .getAll() method to grab all the content in the DB\n  const req = objStore.getAll();\n  // confirm the data was fetched\n  const res = await req;\n  console.log('data saved to the jateDB', res);\n};\n\n// PUT function\nexport const putDb = async (id, value) => {\n  console.log('PUT request to update the jateDB');\n  // connect to DB and version we want to use\n  const jateDb = await openDB('jate', 1);\n  // mnew trans to specify the DB we are posting to and the data privileges. \n  const tx = jateDb.transaction('jate', 'readwrite');\n  // open the object store\n  const objStore = tx.objectStore('jate');\n  // use the .add() method to pass in content\n  const req = objStore.put({\n    id: id,\n    value: value\n  });\n  // confirm the data was added\n  const res = await req;\n  console.log('data saved to the jateDB', res);\n};\ninitdb();","map":{"version":3,"names":["openDB","initdb","upgrade","db","objectStoreNames","contains","console","log","createObjectStore","keyPath","autoIncrement","getDb","value","jateDb","tx","transaction","objStore","objectStore","req","getAll","res","putDb","id","put"],"sources":["/Users/meghanharper/texteditor/src/js/database.js"],"sourcesContent":["import { openDB } from 'idb';\n\nconst initdb = async () =>\n  openDB('jate', 1, {\n    upgrade(db) {\n      if (db.objectStoreNames.contains('jate')) {\n        console.log('jate database already exists');\n        return;\n      }\n      db.createObjectStore('jate', { keyPath: 'id', autoIncrement: true });\n      console.log('jate database created');\n    },\n  });\n\n// GET function\nexport const getDb = async (value) => {\n  console.log('Getting data from the jateDB');\n  // connect to DB and version we want to use\n  const jateDb = await openDB('jate', 1);\n  // transactionto specify the DB we are posting to and the data privileges. \n  const tx = jateDb.transaction('jate', 'readwrite');\n  // open the object store\n  const objStore = tx.objectStore('jate');\n  // use the .getAll() method to grab all the content in the DB\n  const req = objStore.getAll()\n  // confirm the data was fetched\n  const res = await req;\n  console.log('data saved to the jateDB', res);\n};\n\n// PUT function\nexport const putDb = async (id, value) => {\n  console.log('PUT request to update the jateDB');\n  // connect to DB and version we want to use\n  const jateDb = await openDB('jate', 1);\n  // mnew trans to specify the DB we are posting to and the data privileges. \n  const tx = jateDb.transaction('jate', 'readwrite');\n  // open the object store\n  const objStore = tx.objectStore('jate');\n  // use the .add() method to pass in content\n  const req = objStore.put({ id: id, value: value })\n  // confirm the data was added\n  const res = await req;\n  console.log('data saved to the jateDB', res);\n};\n\ninitdb();\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,KAAK;AAE5B,MAAMC,MAAM,GAAG,YACbD,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE;EAChBE,OAAO,CAACC,EAAE,EAAE;IACV,IAAIA,EAAE,CAACC,gBAAgB,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;MACxCC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3C;IACF;IACAJ,EAAE,CAACK,iBAAiB,CAAC,MAAM,EAAE;MAAEC,OAAO,EAAE,IAAI;MAAEC,aAAa,EAAE;IAAK,CAAC,CAAC;IACpEJ,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACtC;AACF,CAAC,CAAC;;AAEJ;AACA,OAAO,MAAMI,KAAK,GAAG,MAAOC,KAAK,IAAK;EACpCN,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;EAC3C;EACA,MAAMM,MAAM,GAAG,MAAMb,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;EACtC;EACA,MAAMc,EAAE,GAAGD,MAAM,CAACE,WAAW,CAAC,MAAM,EAAE,WAAW,CAAC;EAClD;EACA,MAAMC,QAAQ,GAAGF,EAAE,CAACG,WAAW,CAAC,MAAM,CAAC;EACvC;EACA,MAAMC,GAAG,GAAGF,QAAQ,CAACG,MAAM,EAAE;EAC7B;EACA,MAAMC,GAAG,GAAG,MAAMF,GAAG;EACrBZ,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEa,GAAG,CAAC;AAC9C,CAAC;;AAED;AACA,OAAO,MAAMC,KAAK,GAAG,OAAOC,EAAE,EAAEV,KAAK,KAAK;EACxCN,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;EAC/C;EACA,MAAMM,MAAM,GAAG,MAAMb,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;EACtC;EACA,MAAMc,EAAE,GAAGD,MAAM,CAACE,WAAW,CAAC,MAAM,EAAE,WAAW,CAAC;EAClD;EACA,MAAMC,QAAQ,GAAGF,EAAE,CAACG,WAAW,CAAC,MAAM,CAAC;EACvC;EACA,MAAMC,GAAG,GAAGF,QAAQ,CAACO,GAAG,CAAC;IAAED,EAAE,EAAEA,EAAE;IAAEV,KAAK,EAAEA;EAAM,CAAC,CAAC;EAClD;EACA,MAAMQ,GAAG,GAAG,MAAMF,GAAG;EACrBZ,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEa,GAAG,CAAC;AAC9C,CAAC;AAEDnB,MAAM,EAAE"},"metadata":{},"sourceType":"module"}